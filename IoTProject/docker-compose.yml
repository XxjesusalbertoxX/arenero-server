services:

  # Broker MQTT con plugin habilitado (por ejemplo, rabbitmq_mqtt)
  # rabbit_mqtt:
  #   image: rabbitmq:management
  #   container_name: rabbit_mqtt
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "check_running"]
  #     interval: 20s    # Intervalo entre cada intento de comprobación
  #     timeout: 10s     # Tiempo máximo para ejecutar la comprobación
  #     retries: 10      # Número de intentos antes de marcar el contenedor como fallido
  #     start_period: 40s # Tiempo de espera antes de iniciar las comprobaciones de salud
  #   ports:
  #     - "1883:1883"    # Puerto MQTT (para comunicación con Arduino)
  #     # Puedes remapear los puertos AMQP/management si es necesario:
  #     - "5673:5672"
  #     - "15673:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: admin
  #     RABBITMQ_DEFAULT_PASS: admin123
  #   volumes:
  #     - rabbit_mqtt_data:/var/lib/rabbitmq
  #     - ./enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
  #   networks:
  #     - backend

  # # Broker AMQP para comunicación interna entre microservicios
  # rabbit_amqp:
  #   image: rabbitmq:3-management
  #   container_name: rabbit_amqp
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "check_running"]
  #     interval: 15s    # Intervalo entre cada intento de comprobación
  #     timeout: 10s     # Tiempo máximo para ejecutar la comprobación
  #     retries: 10      # Número de intentos antes de marcar el contenedor como fallido
  #     start_period: 30s # Tiempo de espera antes de iniciar las comprobaciones de salud
  #   ports:
  #     - "5672:5672"    # Puerto AMQP
  #     - "15672:15672"  # Interfaz de administración
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: 'mysecretcookie'
  #     RABBITMQ_DEFAULT_USER: admin
  #     RABBITMQ_DEFAULT_PASS: admin123
  #   volumes:
  #     - rabbit_amqp_data:/var/lib/rabbitmq
  #   networks:
  #     - backend

  apigateway:
    build: ../infraestructure/api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ../infraestructure/api-gateway:/app
      - /app/node_modules
    depends_on:
      - login
      - auth
      - notifications
      - iot
    networks:
      - backend

  login:
    build: ../services/login
    ports:
      - "3001:3000"
    volumes:
      - ../services/login:/app
      - /app/node_modules
    depends_on:
      - db_auth
      - rabbit_amqp
    networks:
      - backend

  auth:
    build: ../services/auth
    ports:
      - "3002:3000"
    volumes:
      - ../services/auth:/app
      - /app/node_modules
    depends_on:
      - db_auth
      - rabbit_amqp
    networks:
      - backend

  notifications:
    build: ../services/notification
    ports:
      - "3003:3000"
    volumes:
      - ../services/notification:/app
      - /app/node_modules
    depends_on:
      - rabbit_amqp
    networks:
      - backend

  iot:
    build: ../services/iot
    ports:
      - "3004:3000"
    volumes:
      - ../services/iot:/app
    depends_on:
      - db_iot
      # - mqtt_broker
      - rabbit_mqtt
      - rabbit_amqp
      - websocket
    networks:
      - backend

  websocket:
    build: ../infraestructure/websocket
    ports:
      - "3005:3000"
    restart: on-failure
    volumes:
      - ../infraestructure/websocket:/app
    networks:
      - backend

  # mqtt_broker:
  #   image: eclipse-mosquitto:2
  #   healthcheck:
  #     test: ["CMD", "sh", "-c", "nc -z localhost 1883"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   ports:
  #     - "1883:1883"    # Protocolo MQTT
  #     - "9001:9001"    # Websocket para MQTT (si se usa)
  #   volumes:
  #     - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
  #     - ./mosquitto-data:/mosquitto/data
  #   networks:
  #     - backend

  # db_auth:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_USER=auth_user
  #     - POSTGRES_PASSWORD=secret
  #     - POSTGRES_DB=auth_db
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - db_auth_data:/var/lib/postgresql/data
  #   networks:
  #     - backend

  # db_iot:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_USER=iot_user
  #     - POSTGRES_PASSWORD=secret
  #     - POSTGRES_DB=iot_db
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - db_iot_data:/var/lib/postgresql/data
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  # mosquitto_data:
  # mosquitto_config:
  rabbit_amqp_data:
    name: rabbit_amqp_data
  rabbit_mqtt_data:
    name: rabbit_mqtt_data
  db_auth_data:
  db_iot_data:
